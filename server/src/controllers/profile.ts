import { RequestHandler, Response } from "express";
import { isValidObjectId, ObjectId, PipelineStage, Types } from "mongoose";
import User from "#/models/user";
import { paginationQuery } from "#/@types/misc";
import Audio, { AudioDocument } from "#/models/audio";
import Playlist from "#/models/playlist";
import History from '#/models/history'
import { getUsersPreviousHistory } from "#/utils/helper";
import AutoGeneratedPlaylist from "#/models/autoGeneratedPlaylist";

export const updateFollower: RequestHandler = async (req, res: any) => {
  //user want to follow this profile id
  const { profileId } = req.params; // the id that user want to follow
  let status: "added" | "removed";

  if (!isValidObjectId(profileId))
    return res
      .status(422)
      .json({ error: "Something went wrong, User not found" });

  const profile = await User.findById(profileId);
  if (!profile)
    return res
      .status(422)
      .json({ error: "Something went wrong, profile not found!" });

  // Chech if user already is a follower
  const alreadyAFollower = await User.findOne({
    _id: profileId,
    followers: req.user.id,
  });
  if (alreadyAFollower) {
    // un follow
    await User.updateOne(
      {
        _id: profileId,
      },
      {
        $pull: { followers: req.user.id },
      }
    );

    status = "removed";
    //follow
  } else {
    await User.updateOne(
      {
        _id: profileId,
      },
      {
        $addToSet: { followers: req.user.id },
      }
    );
    status = "added";
  }

  if (status === "added") {
    //update the following list
    await User.updateOne(
      { _id: req.user.id },
      {
        $addToSet: {
          following: profileId,
        },
      }
    );
  }

  if (status === "removed") {
    //remove from the followign list
    await User.updateOne(
      { _id: req.user.id },
      {
        $pull: {
          following: profileId,
        },
      }
    );
  }
  res.json({ status });
};

//get all uploaded audios by requested user
export const getUploads: RequestHandler = async (req, res: any) => {
  const { pageNo = "0", limit = "20" } = req.query as paginationQuery;

  //find user form mustAuth middleWare
  const data = await Audio.find({ owner: req.user.id })
    .skip(parseInt(limit) * parseInt(pageNo))
    .limit(parseInt(limit))
    .sort("-cratedAt");

  if (!data) return res.json("Audio not found");

  const audio = data.map((item) => {
    return {
      id: item._id,
      title: item.title,
      about: item.about,
      file: item.file.url,
      poster: item.poster?.url,
      data: item.createdAt,
      owner: {
        name: req.user.name,
        id: req.user.id,
      },
    };
  });
  res.json({ audio });
};

// get public uploads of any user
export const getPublicUploads: RequestHandler = async (req, res: any) => {
  const { pageNo = "0", limit = "20" } = req.query as paginationQuery;

  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res.status(422).json({ error: "Invalid profile!" });

  //find audios uploaded by public
  const data = await Audio.find({ owner: profileId })
    .skip(parseInt(limit) * parseInt(pageNo))
    .limit(parseInt(limit))
    .sort("-createdAt")
    .populate<AudioDocument<{ name: string; _id: ObjectId }>>("owner");

  if (!data) return res.json("Audio not found");

  const audio = data.map((item) => {
    return {
      id: item._id,
      title: item.title,
      about: item.about,
      file: item.file.url,
      poster: item.poster?.url,
      data: item.createdAt,
      owner: {
        name: item.owner.name,
        id: item.owner._id,
      },
    };
  });
  res.json({ audio });
};

// get profile info
export const getPublicProfile: RequestHandler = async (req, res: any) => {
  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res
      .status(422)
      .json({ error: "Something went wrong, Invalid profile" });

  const user = await User.findById(profileId);
  if (!user)
    return res.json({ error: "Something went wrong, user not found!" });

  res.json({
    proflile: {
      id: user._id,
      name: user.name,
      email: user.email,
      followers: user.followers.length,
      following: user.following.length,
      avatar: user.avatar?.url,
    },
  });
};

// get profile info
export const getPublicPlaylist: RequestHandler = async (req, res: any) => {
  const { pageNo = "0", limit = "20" } = req.query as paginationQuery;
  const { profileId } = req.params;
  if (!isValidObjectId(profileId))
    return res
      .status(422)
      .json({ error: "Something went wrong, Invalid profile" });

  //find public playlists
  const playlist = await Playlist.find({
    owner: profileId,
    visibility: "public",
  })
    .skip(parseInt(limit) * parseInt(pageNo))
    .limit(parseInt(limit))
    .sort("-createdAt");

  if (!playlist)
    return res
      .status(404)
      .json({ error: "Something went wrong, profile not found!" });

  res.json({
    playlist: playlist.map((item) => {
      return {
        id: item._id,
        title: item.title,
        itemsCount: item.items.length,
        visibility: item.visibility,
      };
    }),
  });
};


//get recommmended playlist
export const getRecommendedByProfile: RequestHandler = async(req, res:any)=>{
  const user =req.user;

    let matchOptions:PipelineStage.Match =  {$match: {_id: {$exists: true}}}

  if(user){
    //If user send personalised recommendation

    //fetch users previous history
    const category = await getUsersPreviousHistory(req);
   

    if (category.length){
      matchOptions = { $match: {category:{$in:category}}}
    }
  }

  //else send generic recommendation
  const audios = await Audio.aggregate([
    matchOptions,
    {
      $sort:{
        "likes.count": -1
      }
    },
    {$limit:10},
    {
      $lookup:{
        from:"users",
        localField:"owner",
        foreignField:"_id",
        as: "owner"
      }
    },
    {
      $unwind: {path: "$owner"}
    },
    {
      $project:{
        _id:0,
        id: "$id",
        title: "$title",
        category: "$category",
        about: "$about",
        file: "$file.url",
        poster: "$poster.url",
        owner: {name: "$owner.name", id: "$owner._id"}
      }
    }
  ]);
  res.json({audios})
};

//get autoGeneratedPlaylist
export const getAutoGeneratedPlaylist: RequestHandler = async(req, res:any)=>{
  //find out 5 playlist
  //1 mix 20 
  const [result] = await History.aggregate([
    {$match: {owner: req.user.id}},
    {$unwind: "$all"},
    {$group: {_id: "$all.audio", items: {$addToSet: "$all.audio"} }},
    {$sample: {size: 20}},
    {$group: {_id:null, items: {$push: "$_id"}}}
  ])

  const title = "Mix 20"
  if(result){
    await Playlist.updateOne({ owner:req.user.id, title: title},
      {$set: {title, items: result.items, visibility: "auto"}},
      {upsert:true}
    );
  }


  //4 autogenerated playlist
  const category = await getUsersPreviousHistory(req);

  let matchOptions:PipelineStage.Match =  {$match: {_id: {$exists: true}}};

  if(category.length){
    matchOptions = {$match: {title: {$in: category}}}
  }

  const agpl = await AutoGeneratedPlaylist.aggregate([
    matchOptions,
    {$sample: {size:4}},
    {
      $project: {
        _id: 0,
        id: "$_id",
        title: "title",
        itemsCount: {$size: "$items"}
      }
    }
  ]);

  const playlist = await Playlist.findOne({owner:req.user.id, title});

  const finalList = agpl.concat({
    id:playlist?._id,
    title: playlist?.title,
    itemsCount: playlist?.items.length
  })

  res.json({playlist:finalList})
};

//get followers for the authenticated user
export const getFollowersProfile: RequestHandler = async(req, res: Response)=>{
  const {limit ="20", pageNo="0"} = req.query as paginationQuery

  const [result] = await User.aggregate([
    {
      $match: {_id: req.user.id}
    },
    {
      $project: {
        followers:{
          $slice:  ["$followers", parseInt(pageNo) * parseInt(limit), parseInt(limit)]
        }
      }
    },
    {
      $unwind: {path: "$followers"}
    },
    {
      $lookup:{
        from : "users",
        localField: "followers",
        foreignField: "_id",
        as: "UserInfo"
      }
    },
    {
      $unwind: "$userInfo"
    },
    {
      $group:{
        _id: null,
        followers: {
          $push:{
            id: "$userInfo._id",
            name: "userInfo.name",
            avatar: "userInfo.avatar.url"
          }
        }
      }
    }
  ]);
  if(!result){
    res.json({followers:[]})
  }

  res.json({followers: result})
};


//get followers for the authenticated user
export const getFollowingsProfile: RequestHandler = async(req, res: Response)=>{
  const {limit ="20", pageNo="0"} = req.query as paginationQuery

  const [result] = await User.aggregate([
    {
      $match: {_id: req.user.id}
    },
    {
      $project: {
        followings:{
          $slice:  ["$followings", parseInt(pageNo) * parseInt(limit), parseInt(limit)]
        }
      }
    },
    {
      $unwind: {path: "$followings"}
    },
    {
      $lookup:{
        from : "users",
        localField: "followings",
        foreignField: "_id",
        as: "UserInfo"
      }
    },
    {
      $unwind: "$userInfo"
    },
    {
      $group:{
        _id: null,
        followings: {
          $push:{
            id: "$userInfo._id",
            name: "userInfo.name",
            avatar: "userInfo.avatar.url"
          }
        }
      }
    }
  ]);
  if(!result){
    res.json({followings:[]})
  }

  res.json({followings: result})
};

//get followers for the authenticated user
export const getFollowersProfilePublic: RequestHandler = async (req, res:any) => {
  const { limit = "20", pageNo = "0" } = req.query as paginationQuery;
  const { profileId } = req.params;

  if (!isValidObjectId(profileId)) {
    return res.status(422).json({ error: "Invalid profile id!" });
  }

  const [result] = await User.aggregate([
    { $match: { _id: new Types.ObjectId(profileId) } },
    {
      $project: {
        followers: {
          $slice: [
            "$followers",
            parseInt(pageNo) * parseInt(limit),
            parseInt(limit),
          ],
        },
      },
    },
    { $unwind: "$followers" },
    {
      $lookup: {
        from: "users",
        localField: "followers",
        foreignField: "_id",
        as: "userInfo",
      },
    },
    { $unwind: "$userInfo" },
    {
      $group: {
        _id: null,
        followers: {
          $push: {
            id: "$userInfo._id",
            name: "$userInfo.name",
            avatar: "$userInfo.avatar.url",
          },
        },
      },
    },
  ]);

  if (!result) {
    return res.json({ followers: [] });
  }

  res.json({ followers: result.followers });
};

// get audios for this playlist 
export const getPlaylistAudios: RequestHandler = async (req,res:any)=>{
  const { limit = "20", pageNo = "0" } = req.query as paginationQuery;

  const {playlistId} = req.params;
  if(!isValidObjectId(playlistId)) return res.json({error:"Playlist not found!"})

  const aggreagationLogic = [
      { $match: { 
        _id: new Types.ObjectId(playlistId),
        visibility: {$ne: "private"}  //it will exclude private playlists 
        } 
      },
      {
        $project:{
          items:{
            $slice: ["$items", parseInt(pageNo) * parseInt(limit), parseInt(limit)]
          },
          title: "$title"
        }
      },
      {
        $unwind: "$items"
      },
      {$lookup:{
        from: "audios",
        localField: "items",
        foreignField: "_id",
        as: "audios"
      }},
      {
        $unwind: "$audios"
      },
      {$lookup:{
        from: "users",
        localField: "audios.owner",
        foreignField: "_id",
        as: "userInfo"
      }},
      {
        $unwind: "$userInfo"
      },
      {
        $group:{
          _id: {
            id: "$_id",
            title: "$title",
          },
          audios: {
            $push:{
              id:"$audios._id",
              title: "$audios.title",
              about: "$audios.about",
              category: "$audios.category",
              file: "$audios.file.url",
              poster: "$audios.poster.url",
              owner: {name: "$userInfo.name", id: "$userInfo._id"}
            }
          }
        }
      },
      {
        $project:{
          _id: 0,
          id: "$_id.id",
          title: "$_id.title",
          audios: "$$ROOT.audios",
        }
      }
  ]

  const [playlistResult] = await Playlist.aggregate(aggreagationLogic);
  //if no playlsit id found in Playlist than look in AutogeneratedPlaylist 
  if(!playlistResult){
    const [playlistResult] = await AutoGeneratedPlaylist.aggregate(aggreagationLogic);
    return res.json({list: playlistResult})
  };

  res.json({list: playlistResult})
}
